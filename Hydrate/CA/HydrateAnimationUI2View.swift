//
// HydrateAnimationUI2View.swift
// Generated by Core Animator version 1.5.2 on 1/26/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _HydrateAnimationUI2PassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class HydrateAnimationUI2View : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1500, height: 1500))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1500, height:1500)
		__scaling__.center = CGPoint(x:750.0, y:750.0)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let rainDrop1__root = _HydrateAnimationUI2PassthroughView()
		let rainDrop1__xScale = _HydrateAnimationUI2PassthroughView()
		let rainDrop1__yScale = _HydrateAnimationUI2PassthroughView()
		let rainDrop1 = UIImageView()
		let imgRainDrop1 = UIImage(named:"Rain-Drop-1.png", in: bundle, compatibleWith: nil)
		if imgRainDrop1 == nil {
			print("** Warning: Could not create image from 'Rain-Drop-1.png'")
		}
		rainDrop1.image = imgRainDrop1
		rainDrop1.contentMode = .center
		rainDrop1.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		rainDrop1__root.layer.position = CGPoint(x:599.703, y:599.703)
		rainDrop1__xScale.transform = CGAffineTransform(scaleX: 2.17, y: 1.00)
		rainDrop1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 2.17)
		rainDrop1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rainDrop1__root.addSubview(rainDrop1__xScale)
		rainDrop1__xScale.addSubview(rainDrop1__yScale)
		rainDrop1__yScale.addSubview(rainDrop1)
		__scaling__.addSubview(rainDrop1__root)
		viewsByName["Rain-Drop-1__root"] = rainDrop1__root
		viewsByName["Rain-Drop-1__xScale"] = rainDrop1__xScale
		viewsByName["Rain-Drop-1__yScale"] = rainDrop1__yScale
		viewsByName["Rain-Drop-1"] = rainDrop1

		let rainDrop2__root = _HydrateAnimationUI2PassthroughView()
		let rainDrop2__xScale = _HydrateAnimationUI2PassthroughView()
		let rainDrop2__yScale = _HydrateAnimationUI2PassthroughView()
		let rainDrop2 = UIImageView()
		let imgRainDrop2 = UIImage(named:"Rain-Drop-2.png", in: bundle, compatibleWith: nil)
		if imgRainDrop2 == nil {
			print("** Warning: Could not create image from 'Rain-Drop-2.png'")
		}
		rainDrop2.image = imgRainDrop2
		rainDrop2.contentMode = .center
		rainDrop2.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		rainDrop2__root.layer.position = CGPoint(x:674.269, y:674.269)
		rainDrop2__xScale.transform = CGAffineTransform(scaleX: 1.59, y: 1.00)
		rainDrop2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.59)
		rainDrop2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rainDrop2__root.addSubview(rainDrop2__xScale)
		rainDrop2__xScale.addSubview(rainDrop2__yScale)
		rainDrop2__yScale.addSubview(rainDrop2)
		__scaling__.addSubview(rainDrop2__root)
		viewsByName["Rain-Drop-2__root"] = rainDrop2__root
		viewsByName["Rain-Drop-2__xScale"] = rainDrop2__xScale
		viewsByName["Rain-Drop-2__yScale"] = rainDrop2__yScale
		viewsByName["Rain-Drop-2"] = rainDrop2

		let rainDrop3__root = _HydrateAnimationUI2PassthroughView()
		let rainDrop3__xScale = _HydrateAnimationUI2PassthroughView()
		let rainDrop3__yScale = _HydrateAnimationUI2PassthroughView()
		let rainDrop3 = UIImageView()
		let imgRainDrop3 = UIImage(named:"Rain-Drop-3.png", in: bundle, compatibleWith: nil)
		if imgRainDrop3 == nil {
			print("** Warning: Could not create image from 'Rain-Drop-3.png'")
		}
		rainDrop3.image = imgRainDrop3
		rainDrop3.contentMode = .center
		rainDrop3.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		rainDrop3__root.layer.position = CGPoint(x:680.844, y:680.844)
		rainDrop3__xScale.transform = CGAffineTransform(scaleX: 1.54, y: 1.00)
		rainDrop3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.54)
		rainDrop3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rainDrop3__root.addSubview(rainDrop3__xScale)
		rainDrop3__xScale.addSubview(rainDrop3__yScale)
		rainDrop3__yScale.addSubview(rainDrop3)
		__scaling__.addSubview(rainDrop3__root)
		viewsByName["Rain-Drop-3__root"] = rainDrop3__root
		viewsByName["Rain-Drop-3__xScale"] = rainDrop3__xScale
		viewsByName["Rain-Drop-3__yScale"] = rainDrop3__yScale
		viewsByName["Rain-Drop-3"] = rainDrop3

		self.viewsByName = viewsByName
	}

	// - MARK: Rain1

	func addRain1Animation() {
		addRain1Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addRain1Animation(completion: ((Bool) -> Void)?) {
		addRain1Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addRain1Animation(removedOnCompletion: Bool) {
		addRain1Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addRain1Animation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addRain1Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addRain1Animation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Rain1")
			self.animationCompletions[layer.animation(forKey: "Rain1")!] = complete
		}

		let rainDrop1OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		rainDrop1OpacityAnimation.duration = 1.000
		rainDrop1OpacityAnimation.values = [1.000, 0.098] as [Float]
		rainDrop1OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop1OpacityAnimation.timingFunctions = [linearTiming]
		rainDrop1OpacityAnimation.beginTime = beginTime
		rainDrop1OpacityAnimation.fillMode = fillMode
		rainDrop1OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-1__root"]?.layer.add(rainDrop1OpacityAnimation, forKey:"Rain1_Opacity")

		let rainDrop1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rainDrop1TranslationXAnimation.duration = 1.000
		rainDrop1TranslationXAnimation.values = [-133.114, -135.947] as [Float]
		rainDrop1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop1TranslationXAnimation.timingFunctions = [linearTiming]
		rainDrop1TranslationXAnimation.beginTime = beginTime
		rainDrop1TranslationXAnimation.fillMode = fillMode
		rainDrop1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-1__root"]?.layer.add(rainDrop1TranslationXAnimation, forKey:"Rain1_TranslationX")

		let rainDrop1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rainDrop1TranslationYAnimation.duration = 1.000
		rainDrop1TranslationYAnimation.values = [-764.077, 261.273] as [Float]
		rainDrop1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop1TranslationYAnimation.timingFunctions = [linearTiming]
		rainDrop1TranslationYAnimation.beginTime = beginTime
		rainDrop1TranslationYAnimation.fillMode = fillMode
		rainDrop1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-1__root"]?.layer.add(rainDrop1TranslationYAnimation, forKey:"Rain1_TranslationY")

		let rainDrop2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		rainDrop2OpacityAnimation.duration = 1.000
		rainDrop2OpacityAnimation.values = [1.000, 0.100] as [Float]
		rainDrop2OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop2OpacityAnimation.timingFunctions = [linearTiming]
		rainDrop2OpacityAnimation.beginTime = beginTime
		rainDrop2OpacityAnimation.fillMode = fillMode
		rainDrop2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-2__root"]?.layer.add(rainDrop2OpacityAnimation, forKey:"Rain1_Opacity")

		let rainDrop2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rainDrop2TranslationXAnimation.duration = 1.000
		rainDrop2TranslationXAnimation.values = [-10.284, 35.380] as [Float]
		rainDrop2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop2TranslationXAnimation.timingFunctions = [linearTiming]
		rainDrop2TranslationXAnimation.beginTime = beginTime
		rainDrop2TranslationXAnimation.fillMode = fillMode
		rainDrop2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-2__root"]?.layer.add(rainDrop2TranslationXAnimation, forKey:"Rain1_TranslationX")

		let rainDrop2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rainDrop2TranslationYAnimation.duration = 1.000
		rainDrop2TranslationYAnimation.values = [-775.224, 253.591] as [Float]
		rainDrop2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop2TranslationYAnimation.timingFunctions = [linearTiming]
		rainDrop2TranslationYAnimation.beginTime = beginTime
		rainDrop2TranslationYAnimation.fillMode = fillMode
		rainDrop2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-2__root"]?.layer.add(rainDrop2TranslationYAnimation, forKey:"Rain1_TranslationY")

		let rainDrop3OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		rainDrop3OpacityAnimation.duration = 1.000
		rainDrop3OpacityAnimation.values = [1.000, 0.100] as [Float]
		rainDrop3OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop3OpacityAnimation.timingFunctions = [linearTiming]
		rainDrop3OpacityAnimation.beginTime = beginTime
		rainDrop3OpacityAnimation.fillMode = fillMode
		rainDrop3OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-3__root"]?.layer.add(rainDrop3OpacityAnimation, forKey:"Rain1_Opacity")

		let rainDrop3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rainDrop3TranslationXAnimation.duration = 1.000
		rainDrop3TranslationXAnimation.values = [-135.897, -129.955] as [Float]
		rainDrop3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop3TranslationXAnimation.timingFunctions = [linearTiming]
		rainDrop3TranslationXAnimation.beginTime = beginTime
		rainDrop3TranslationXAnimation.fillMode = fillMode
		rainDrop3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-3__root"]?.layer.add(rainDrop3TranslationXAnimation, forKey:"Rain1_TranslationX")

		let rainDrop3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rainDrop3TranslationYAnimation.duration = 1.000
		rainDrop3TranslationYAnimation.values = [-889.597, 173.986] as [Float]
		rainDrop3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rainDrop3TranslationYAnimation.timingFunctions = [linearTiming]
		rainDrop3TranslationYAnimation.beginTime = beginTime
		rainDrop3TranslationYAnimation.fillMode = fillMode
		rainDrop3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rain-Drop-3__root"]?.layer.add(rainDrop3TranslationYAnimation, forKey:"Rain1_TranslationY")
	}

	func removeRain1Animation() {
		self.layer.removeAnimation(forKey: "Rain1")
		self.viewsByName["Rain-Drop-1__root"]?.layer.removeAnimation(forKey: "Rain1_Opacity")
		self.viewsByName["Rain-Drop-1__root"]?.layer.removeAnimation(forKey: "Rain1_TranslationX")
		self.viewsByName["Rain-Drop-1__root"]?.layer.removeAnimation(forKey: "Rain1_TranslationY")
		self.viewsByName["Rain-Drop-2__root"]?.layer.removeAnimation(forKey: "Rain1_Opacity")
		self.viewsByName["Rain-Drop-2__root"]?.layer.removeAnimation(forKey: "Rain1_TranslationX")
		self.viewsByName["Rain-Drop-2__root"]?.layer.removeAnimation(forKey: "Rain1_TranslationY")
		self.viewsByName["Rain-Drop-3__root"]?.layer.removeAnimation(forKey: "Rain1_Opacity")
		self.viewsByName["Rain-Drop-3__root"]?.layer.removeAnimation(forKey: "Rain1_TranslationX")
		self.viewsByName["Rain-Drop-3__root"]?.layer.removeAnimation(forKey: "Rain1_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Rain1")
	}
}