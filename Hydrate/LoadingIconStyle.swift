//
//  LoadingIconStyle.swift
//  Hydrate
//
//  Created by Mike Forster on 1/26/18.
//  Copyright Â© 2018 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class LoadingIconStyle : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor = UIColor(red: 0.153, green: 0.231, blue: 0.478, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.071, green: 0.067, blue: 0.286, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.443, green: 0.886, blue: 0.937, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.220, green: 0.776, blue: 0.851, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor6 = UIColor(red: 0.816, green: 0.820, blue: 0.827, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.008, green: 0.698, blue: 0.698, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.220, green: 0.408, blue: 0.584, alpha: 1.000)

        //// water-bottle.svg Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 512, height: 512))
        fillColor.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 294.98, y: 509.05))
        bezierPath.addCurve(to: CGPoint(x: 499.67, y: 334.65), controlPoint1: CGPoint(x: 391.55, y: 494.3), controlPoint2: CGPoint(x: 470.35, y: 425.58))
        bezierPath.addLine(to: CGPoint(x: 281.64, y: 116.61))
        bezierPath.addLine(to: CGPoint(x: 280.26, y: 352.92))
        bezierPath.addLine(to: CGPoint(x: 206.15, y: 420.23))
        bezierPath.addLine(to: CGPoint(x: 294.98, y: 509.05))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 298.24, y: 271.07))
        bezier2Path.addLine(to: CGPoint(x: 298.24, y: 233.13))
        bezier2Path.addCurve(to: CGPoint(x: 300.79, y: 222.6), controlPoint1: CGPoint(x: 298.24, y: 229.47), controlPoint2: CGPoint(x: 299.11, y: 225.86))
        bezier2Path.addLine(to: CGPoint(x: 310.34, y: 204.07))
        bezier2Path.addCurve(to: CGPoint(x: 312.89, y: 193.54), controlPoint1: CGPoint(x: 312.01, y: 200.81), controlPoint2: CGPoint(x: 312.89, y: 197.2))
        bezier2Path.addLine(to: CGPoint(x: 312.89, y: 165.21))
        bezier2Path.addCurve(to: CGPoint(x: 289.9, y: 142.22), controlPoint1: CGPoint(x: 312.89, y: 152.51), controlPoint2: CGPoint(x: 302.59, y: 142.22))
        bezier2Path.addLine(to: CGPoint(x: 222.1, y: 142.22))
        bezier2Path.addCurve(to: CGPoint(x: 199.11, y: 165.21), controlPoint1: CGPoint(x: 209.4, y: 142.22), controlPoint2: CGPoint(x: 199.11, y: 152.51))
        bezier2Path.addLine(to: CGPoint(x: 199.11, y: 193.54))
        bezier2Path.addCurve(to: CGPoint(x: 201.66, y: 204.07), controlPoint1: CGPoint(x: 199.11, y: 197.2), controlPoint2: CGPoint(x: 199.99, y: 200.81))
        bezier2Path.addLine(to: CGPoint(x: 211.21, y: 222.6))
        bezier2Path.addCurve(to: CGPoint(x: 213.76, y: 233.13), controlPoint1: CGPoint(x: 212.89, y: 225.86), controlPoint2: CGPoint(x: 213.76, y: 229.47))
        bezier2Path.addLine(to: CGPoint(x: 213.76, y: 271.07))
        bezier2Path.addCurve(to: CGPoint(x: 211.21, y: 281.59), controlPoint1: CGPoint(x: 213.76, y: 274.73), controlPoint2: CGPoint(x: 212.89, y: 278.34))
        bezier2Path.addLine(to: CGPoint(x: 201.66, y: 300.13))
        bezier2Path.addCurve(to: CGPoint(x: 199.11, y: 310.66), controlPoint1: CGPoint(x: 199.98, y: 303.39), controlPoint2: CGPoint(x: 199.11, y: 307))
        bezier2Path.addLine(to: CGPoint(x: 199.11, y: 403.68))
        bezier2Path.addCurve(to: CGPoint(x: 222.1, y: 426.66), controlPoint1: CGPoint(x: 199.11, y: 416.37), controlPoint2: CGPoint(x: 209.4, y: 426.66))
        bezier2Path.addLine(to: CGPoint(x: 289.9, y: 426.66))
        bezier2Path.addCurve(to: CGPoint(x: 312.89, y: 403.68), controlPoint1: CGPoint(x: 302.6, y: 426.66), controlPoint2: CGPoint(x: 312.89, y: 416.37))
        bezier2Path.addLine(to: CGPoint(x: 312.89, y: 310.66))
        bezier2Path.addCurve(to: CGPoint(x: 310.34, y: 300.13), controlPoint1: CGPoint(x: 312.89, y: 307), controlPoint2: CGPoint(x: 312.01, y: 303.39))
        bezier2Path.addLine(to: CGPoint(x: 300.79, y: 281.59))
        bezier2Path.addCurve(to: CGPoint(x: 298.24, y: 271.07), controlPoint1: CGPoint(x: 299.11, y: 278.34), controlPoint2: CGPoint(x: 298.24, y: 274.73))
        bezier2Path.close()
        fillColor3.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 300.79, y: 222.6))
        bezier3Path.addLine(to: CGPoint(x: 310.34, y: 204.06))
        bezier3Path.addCurve(to: CGPoint(x: 312.89, y: 193.54), controlPoint1: CGPoint(x: 312.01, y: 200.81), controlPoint2: CGPoint(x: 312.89, y: 197.2))
        bezier3Path.addLine(to: CGPoint(x: 312.89, y: 165.21))
        bezier3Path.addCurve(to: CGPoint(x: 289.9, y: 142.22), controlPoint1: CGPoint(x: 312.89, y: 152.51), controlPoint2: CGPoint(x: 302.59, y: 142.22))
        bezier3Path.addLine(to: CGPoint(x: 256, y: 142.22))
        bezier3Path.addLine(to: CGPoint(x: 256, y: 426.67))
        bezier3Path.addLine(to: CGPoint(x: 289.9, y: 426.67))
        bezier3Path.addCurve(to: CGPoint(x: 312.89, y: 403.68), controlPoint1: CGPoint(x: 302.6, y: 426.67), controlPoint2: CGPoint(x: 312.89, y: 416.37))
        bezier3Path.addLine(to: CGPoint(x: 312.89, y: 310.66))
        bezier3Path.addCurve(to: CGPoint(x: 310.34, y: 300.13), controlPoint1: CGPoint(x: 312.89, y: 306.99), controlPoint2: CGPoint(x: 312.01, y: 303.39))
        bezier3Path.addLine(to: CGPoint(x: 300.79, y: 281.59))
        bezier3Path.addCurve(to: CGPoint(x: 298.24, y: 271.07), controlPoint1: CGPoint(x: 299.11, y: 278.34), controlPoint2: CGPoint(x: 298.24, y: 274.73))
        bezier3Path.addLine(to: CGPoint(x: 298.24, y: 233.13))
        bezier3Path.addCurve(to: CGPoint(x: 300.79, y: 222.6), controlPoint1: CGPoint(x: 298.24, y: 229.47), controlPoint2: CGPoint(x: 299.11, y: 225.86))
        bezier3Path.close()
        fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 284.44, y: 142.22))
        bezier4Path.addLine(to: CGPoint(x: 227.56, y: 142.22))
        bezier4Path.addLine(to: CGPoint(x: 227.56, y: 123.4))
        bezier4Path.addCurve(to: CGPoint(x: 237.18, y: 113.78), controlPoint1: CGPoint(x: 227.56, y: 118.09), controlPoint2: CGPoint(x: 231.87, y: 113.78))
        bezier4Path.addLine(to: CGPoint(x: 274.82, y: 113.78))
        bezier4Path.addCurve(to: CGPoint(x: 284.44, y: 123.4), controlPoint1: CGPoint(x: 280.13, y: 113.78), controlPoint2: CGPoint(x: 284.44, y: 118.09))
        bezier4Path.addLine(to: CGPoint(x: 284.44, y: 142.22))
        bezier4Path.close()
        fillColor5.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 284.44, y: 123.4))
        bezier5Path.addCurve(to: CGPoint(x: 274.82, y: 113.78), controlPoint1: CGPoint(x: 284.44, y: 118.09), controlPoint2: CGPoint(x: 280.13, y: 113.78))
        bezier5Path.addLine(to: CGPoint(x: 256, y: 113.78))
        bezier5Path.addLine(to: CGPoint(x: 256, y: 142.22))
        bezier5Path.addLine(to: CGPoint(x: 284.44, y: 142.22))
        bezier5Path.addLine(to: CGPoint(x: 284.44, y: 123.4))
        bezier5Path.close()
        fillColor6.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 298.93, y: 227.56))
        bezier6Path.addLine(to: CGPoint(x: 213.07, y: 227.56))
        bezier6Path.addCurve(to: CGPoint(x: 213.76, y: 233.13), controlPoint1: CGPoint(x: 213.52, y: 229.37), controlPoint2: CGPoint(x: 213.76, y: 231.24))
        bezier6Path.addLine(to: CGPoint(x: 213.76, y: 271.07))
        bezier6Path.addCurve(to: CGPoint(x: 211.21, y: 281.59), controlPoint1: CGPoint(x: 213.76, y: 274.73), controlPoint2: CGPoint(x: 212.89, y: 278.34))
        bezier6Path.addLine(to: CGPoint(x: 209.74, y: 284.44))
        bezier6Path.addLine(to: CGPoint(x: 302.26, y: 284.44))
        bezier6Path.addLine(to: CGPoint(x: 300.79, y: 281.59))
        bezier6Path.addCurve(to: CGPoint(x: 298.24, y: 271.07), controlPoint1: CGPoint(x: 299.11, y: 278.34), controlPoint2: CGPoint(x: 298.24, y: 274.73))
        bezier6Path.addLine(to: CGPoint(x: 298.24, y: 233.13))
        bezier6Path.addCurve(to: CGPoint(x: 298.93, y: 227.56), controlPoint1: CGPoint(x: 298.24, y: 231.24), controlPoint2: CGPoint(x: 298.48, y: 229.37))
        bezier6Path.close()
        fillColor7.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 300.79, y: 281.6))
        bezier7Path.addCurve(to: CGPoint(x: 298.24, y: 271.07), controlPoint1: CGPoint(x: 299.11, y: 278.34), controlPoint2: CGPoint(x: 298.24, y: 274.73))
        bezier7Path.addLine(to: CGPoint(x: 298.24, y: 233.13))
        bezier7Path.addCurve(to: CGPoint(x: 298.93, y: 227.56), controlPoint1: CGPoint(x: 298.24, y: 231.24), controlPoint2: CGPoint(x: 298.48, y: 229.37))
        bezier7Path.addLine(to: CGPoint(x: 256, y: 227.56))
        bezier7Path.addLine(to: CGPoint(x: 256, y: 284.45))
        bezier7Path.addLine(to: CGPoint(x: 302.26, y: 284.45))
        bezier7Path.addLine(to: CGPoint(x: 300.79, y: 281.6))
        bezier7Path.close()
        fillColor8.setFill()
        bezier7Path.fill()


        //// Group 2


        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16
        
        context.restoreGState()

    }




    @objc(LoadingIconStyleResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
