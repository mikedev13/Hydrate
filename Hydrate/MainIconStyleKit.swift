//
//  MainIconStyleKit.swift
//  Hydrate
//
//  Created by Mike Forster on 1/28/18.
//  Copyright Â© 2018 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class MainIconStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 96, height: 96), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 96, height: 96), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 96, y: resizedFrame.height / 96)


        //// Color Declarations
        let fillColor = UIColor(red: 0.153, green: 0.231, blue: 0.478, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.071, green: 0.067, blue: 0.286, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.443, green: 0.886, blue: 0.937, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.220, green: 0.776, blue: 0.851, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor6 = UIColor(red: 0.816, green: 0.820, blue: 0.827, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.008, green: 0.698, blue: 0.698, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.220, green: 0.408, blue: 0.584, alpha: 1.000)

        //// water-bottle.svg Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 23, y: 22, width: 50, height: 50))
        fillColor.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 51.81, y: 71.71))
        bezierPath.addCurve(to: CGPoint(x: 71.8, y: 54.68), controlPoint1: CGPoint(x: 61.24, y: 70.27), controlPoint2: CGPoint(x: 68.93, y: 63.56))
        bezierPath.addLine(to: CGPoint(x: 50.5, y: 33.39))
        bezierPath.addLine(to: CGPoint(x: 50.37, y: 56.47))
        bezierPath.addLine(to: CGPoint(x: 43.13, y: 63.04))
        bezierPath.addLine(to: CGPoint(x: 51.81, y: 71.71))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 52.12, y: 48.47))
        bezier2Path.addLine(to: CGPoint(x: 52.12, y: 44.77))
        bezier2Path.addCurve(to: CGPoint(x: 52.37, y: 43.74), controlPoint1: CGPoint(x: 52.12, y: 44.41), controlPoint2: CGPoint(x: 52.21, y: 44.06))
        bezier2Path.addLine(to: CGPoint(x: 53.31, y: 41.93))
        bezier2Path.addCurve(to: CGPoint(x: 53.56, y: 40.9), controlPoint1: CGPoint(x: 53.47, y: 41.61), controlPoint2: CGPoint(x: 53.56, y: 41.26))
        bezier2Path.addLine(to: CGPoint(x: 53.56, y: 38.13))
        bezier2Path.addCurve(to: CGPoint(x: 51.31, y: 35.89), controlPoint1: CGPoint(x: 53.56, y: 36.89), controlPoint2: CGPoint(x: 52.55, y: 35.89))
        bezier2Path.addLine(to: CGPoint(x: 44.69, y: 35.89))
        bezier2Path.addCurve(to: CGPoint(x: 42.44, y: 38.13), controlPoint1: CGPoint(x: 43.45, y: 35.89), controlPoint2: CGPoint(x: 42.44, y: 36.89))
        bezier2Path.addLine(to: CGPoint(x: 42.44, y: 40.9))
        bezier2Path.addCurve(to: CGPoint(x: 42.69, y: 41.93), controlPoint1: CGPoint(x: 42.44, y: 41.26), controlPoint2: CGPoint(x: 42.53, y: 41.61))
        bezier2Path.addLine(to: CGPoint(x: 43.63, y: 43.74))
        bezier2Path.addCurve(to: CGPoint(x: 43.88, y: 44.77), controlPoint1: CGPoint(x: 43.79, y: 44.06), controlPoint2: CGPoint(x: 43.88, y: 44.41))
        bezier2Path.addLine(to: CGPoint(x: 43.88, y: 48.47))
        bezier2Path.addCurve(to: CGPoint(x: 43.63, y: 49.5), controlPoint1: CGPoint(x: 43.88, y: 48.83), controlPoint2: CGPoint(x: 43.79, y: 49.18))
        bezier2Path.addLine(to: CGPoint(x: 42.69, y: 51.31))
        bezier2Path.addCurve(to: CGPoint(x: 42.44, y: 52.34), controlPoint1: CGPoint(x: 42.53, y: 51.63), controlPoint2: CGPoint(x: 42.44, y: 51.98))
        bezier2Path.addLine(to: CGPoint(x: 42.44, y: 61.42))
        bezier2Path.addCurve(to: CGPoint(x: 44.69, y: 63.67), controlPoint1: CGPoint(x: 42.44, y: 62.66), controlPoint2: CGPoint(x: 43.45, y: 63.67))
        bezier2Path.addLine(to: CGPoint(x: 51.31, y: 63.67))
        bezier2Path.addCurve(to: CGPoint(x: 53.56, y: 61.42), controlPoint1: CGPoint(x: 52.55, y: 63.67), controlPoint2: CGPoint(x: 53.56, y: 62.66))
        bezier2Path.addLine(to: CGPoint(x: 53.56, y: 52.34))
        bezier2Path.addCurve(to: CGPoint(x: 53.31, y: 51.31), controlPoint1: CGPoint(x: 53.56, y: 51.98), controlPoint2: CGPoint(x: 53.47, y: 51.63))
        bezier2Path.addLine(to: CGPoint(x: 52.37, y: 49.5))
        bezier2Path.addCurve(to: CGPoint(x: 52.12, y: 48.47), controlPoint1: CGPoint(x: 52.21, y: 49.18), controlPoint2: CGPoint(x: 52.12, y: 48.83))
        bezier2Path.close()
        fillColor3.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 52.37, y: 43.74))
        bezier3Path.addLine(to: CGPoint(x: 53.31, y: 41.93))
        bezier3Path.addCurve(to: CGPoint(x: 53.56, y: 40.9), controlPoint1: CGPoint(x: 53.47, y: 41.61), controlPoint2: CGPoint(x: 53.56, y: 41.26))
        bezier3Path.addLine(to: CGPoint(x: 53.56, y: 38.13))
        bezier3Path.addCurve(to: CGPoint(x: 51.31, y: 35.89), controlPoint1: CGPoint(x: 53.56, y: 36.89), controlPoint2: CGPoint(x: 52.55, y: 35.89))
        bezier3Path.addLine(to: CGPoint(x: 48, y: 35.89))
        bezier3Path.addLine(to: CGPoint(x: 48, y: 63.67))
        bezier3Path.addLine(to: CGPoint(x: 51.31, y: 63.67))
        bezier3Path.addCurve(to: CGPoint(x: 53.56, y: 61.42), controlPoint1: CGPoint(x: 52.55, y: 63.67), controlPoint2: CGPoint(x: 53.56, y: 62.66))
        bezier3Path.addLine(to: CGPoint(x: 53.56, y: 52.34))
        bezier3Path.addCurve(to: CGPoint(x: 53.31, y: 51.31), controlPoint1: CGPoint(x: 53.56, y: 51.98), controlPoint2: CGPoint(x: 53.47, y: 51.63))
        bezier3Path.addLine(to: CGPoint(x: 52.37, y: 49.5))
        bezier3Path.addCurve(to: CGPoint(x: 52.12, y: 48.47), controlPoint1: CGPoint(x: 52.21, y: 49.18), controlPoint2: CGPoint(x: 52.12, y: 48.83))
        bezier3Path.addLine(to: CGPoint(x: 52.12, y: 44.77))
        bezier3Path.addCurve(to: CGPoint(x: 52.37, y: 43.74), controlPoint1: CGPoint(x: 52.12, y: 44.41), controlPoint2: CGPoint(x: 52.21, y: 44.06))
        bezier3Path.close()
        fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 50.78, y: 35.89))
        bezier4Path.addLine(to: CGPoint(x: 45.22, y: 35.89))
        bezier4Path.addLine(to: CGPoint(x: 45.22, y: 34.05))
        bezier4Path.addCurve(to: CGPoint(x: 46.16, y: 33.11), controlPoint1: CGPoint(x: 45.22, y: 33.53), controlPoint2: CGPoint(x: 45.64, y: 33.11))
        bezier4Path.addLine(to: CGPoint(x: 49.84, y: 33.11))
        bezier4Path.addCurve(to: CGPoint(x: 50.78, y: 34.05), controlPoint1: CGPoint(x: 50.36, y: 33.11), controlPoint2: CGPoint(x: 50.78, y: 33.53))
        bezier4Path.addLine(to: CGPoint(x: 50.78, y: 35.89))
        bezier4Path.close()
        fillColor5.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 50.78, y: 34.05))
        bezier5Path.addCurve(to: CGPoint(x: 49.84, y: 33.11), controlPoint1: CGPoint(x: 50.78, y: 33.53), controlPoint2: CGPoint(x: 50.36, y: 33.11))
        bezier5Path.addLine(to: CGPoint(x: 48, y: 33.11))
        bezier5Path.addLine(to: CGPoint(x: 48, y: 35.89))
        bezier5Path.addLine(to: CGPoint(x: 50.78, y: 35.89))
        bezier5Path.addLine(to: CGPoint(x: 50.78, y: 34.05))
        bezier5Path.close()
        fillColor6.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 52.19, y: 44.22))
        bezier6Path.addLine(to: CGPoint(x: 43.81, y: 44.22))
        bezier6Path.addCurve(to: CGPoint(x: 43.88, y: 44.77), controlPoint1: CGPoint(x: 43.85, y: 44.4), controlPoint2: CGPoint(x: 43.88, y: 44.58))
        bezier6Path.addLine(to: CGPoint(x: 43.88, y: 48.47))
        bezier6Path.addCurve(to: CGPoint(x: 43.63, y: 49.5), controlPoint1: CGPoint(x: 43.88, y: 48.83), controlPoint2: CGPoint(x: 43.79, y: 49.18))
        bezier6Path.addLine(to: CGPoint(x: 43.48, y: 49.78))
        bezier6Path.addLine(to: CGPoint(x: 52.52, y: 49.78))
        bezier6Path.addLine(to: CGPoint(x: 52.37, y: 49.5))
        bezier6Path.addCurve(to: CGPoint(x: 52.12, y: 48.47), controlPoint1: CGPoint(x: 52.21, y: 49.18), controlPoint2: CGPoint(x: 52.12, y: 48.83))
        bezier6Path.addLine(to: CGPoint(x: 52.12, y: 44.77))
        bezier6Path.addCurve(to: CGPoint(x: 52.19, y: 44.22), controlPoint1: CGPoint(x: 52.12, y: 44.58), controlPoint2: CGPoint(x: 52.15, y: 44.4))
        bezier6Path.close()
        fillColor7.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 52.37, y: 49.5))
        bezier7Path.addCurve(to: CGPoint(x: 52.12, y: 48.47), controlPoint1: CGPoint(x: 52.21, y: 49.18), controlPoint2: CGPoint(x: 52.12, y: 48.83))
        bezier7Path.addLine(to: CGPoint(x: 52.12, y: 44.77))
        bezier7Path.addCurve(to: CGPoint(x: 52.19, y: 44.22), controlPoint1: CGPoint(x: 52.12, y: 44.58), controlPoint2: CGPoint(x: 52.15, y: 44.4))
        bezier7Path.addLine(to: CGPoint(x: 48, y: 44.22))
        bezier7Path.addLine(to: CGPoint(x: 48, y: 49.78))
        bezier7Path.addLine(to: CGPoint(x: 52.52, y: 49.78))
        bezier7Path.addLine(to: CGPoint(x: 52.37, y: 49.5))
        bezier7Path.close()
        fillColor8.setFill()
        bezier7Path.fill()


        //// Group 2


        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16
        
        context.restoreGState()

    }




    @objc(MainIconStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
